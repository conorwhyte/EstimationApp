type Epic {
  id: ID!
  title: String!
  description: String
  tags: [String]
  links: [String]
  total: Float
  stories(filter: ModelStoryFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelStoryConnection
  version: Int!
}

type Story {
  id: ID!
  title: String!
  epicStoriesId: ID
  description: String
  tags: [String]
  links: [String]
  avgEstimate: Float
  actualEstimate: Float
  estimates(filter: ModelEstimateFilterInput, sortDirection: ModelSortDirection, limit: Int, nextToken: String): ModelEstimateConnection
  version: Int!
}

type Estimate {
  id: ID!
  user: String
  estimate: Float
  story: Story
  version: Int!
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelEpicConnection {
  items: [Epic]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelEpicFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  description: ModelStringFilterInput
  tags: ModelStringFilterInput
  links: ModelStringFilterInput
  total: ModelFloatFilterInput
  and: [ModelEpicFilterInput]
  or: [ModelEpicFilterInput]
  not: ModelEpicFilterInput
}

type Query {
  getEpic(id: ID!): Epic
  listEpics(filter: ModelEpicFilterInput, limit: Int, nextToken: String): ModelEpicConnection
  getStory(id: ID!): Story
  listStories(filter: ModelStoryFilterInput, limit: Int, nextToken: String): ModelStoryConnection
  getEstimate(id: ID!): Estimate
  listEstimates(filter: ModelEstimateFilterInput, limit: Int, nextToken: String): ModelEstimateConnection
}

input CreateEpicInput {
  id: ID
  title: String!
  description: String
  tags: [String]
  links: [String]
  total: Float
}

input UpdateEpicInput {
  id: ID!
  title: String
  description: String
  tags: [String]
  links: [String]
  total: Float
  expectedVersion: Int!
}

input DeleteEpicInput {
  id: ID
  expectedVersion: Int!
}

type Mutation {
  createEpic(input: CreateEpicInput!): Epic
  updateEpic(input: UpdateEpicInput!): Epic
  deleteEpic(input: DeleteEpicInput!): Epic
  createStory(input: CreateStoryInput!): Story
  updateStory(input: UpdateStoryInput!): Story
  deleteStory(input: DeleteStoryInput!): Story
  createEstimate(input: CreateEstimateInput!): Estimate
  updateEstimate(input: UpdateEstimateInput!): Estimate
  deleteEstimate(input: DeleteEstimateInput!): Estimate
}

type Subscription {
  onCreateEpic: Epic @aws_subscribe(mutations: ["createEpic"])
  onUpdateEpic: Epic @aws_subscribe(mutations: ["updateEpic"])
  onDeleteEpic: Epic @aws_subscribe(mutations: ["deleteEpic"])
  onCreateStory: Story @aws_subscribe(mutations: ["createStory"])
  onUpdateStory: Story @aws_subscribe(mutations: ["updateStory"])
  onDeleteStory: Story @aws_subscribe(mutations: ["deleteStory"])
  onCreateEstimate: Estimate @aws_subscribe(mutations: ["createEstimate"])
  onUpdateEstimate: Estimate @aws_subscribe(mutations: ["updateEstimate"])
  onDeleteEstimate: Estimate @aws_subscribe(mutations: ["deleteEstimate"])
}

type ModelStoryConnection {
  items: [Story]
  nextToken: String
}

input ModelStoryFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  epicStoriesId: ModelIDFilterInput
  description: ModelStringFilterInput
  tags: ModelStringFilterInput
  links: ModelStringFilterInput
  avgEstimate: ModelFloatFilterInput
  actualEstimate: ModelFloatFilterInput
  and: [ModelStoryFilterInput]
  or: [ModelStoryFilterInput]
  not: ModelStoryFilterInput
}

input CreateStoryInput {
  id: ID
  title: String!
  epicStoriesId: ID
  description: String
  tags: [String]
  links: [String]
  avgEstimate: Float
  actualEstimate: Float
}

input UpdateStoryInput {
  id: ID!
  title: String
  epicStoriesId: ID
  description: String
  tags: [String]
  links: [String]
  avgEstimate: Float
  actualEstimate: Float
  expectedVersion: Int!
}

input DeleteStoryInput {
  id: ID
  expectedVersion: Int!
}

type ModelEstimateConnection {
  items: [Estimate]
  nextToken: String
}

input ModelEstimateFilterInput {
  id: ModelIDFilterInput
  user: ModelStringFilterInput
  estimate: ModelFloatFilterInput
  and: [ModelEstimateFilterInput]
  or: [ModelEstimateFilterInput]
  not: ModelEstimateFilterInput
}

input CreateEstimateInput {
  id: ID
  user: String
  estimate: Float
  estimateStoryId: ID
}

input UpdateEstimateInput {
  id: ID!
  user: String
  estimate: Float
  estimateStoryId: ID
  expectedVersion: Int!
}

input DeleteEstimateInput {
  id: ID
  expectedVersion: Int!
}
